 &CONTROL
 order_of_the_scheme = 'fourth_order',
 parallel_boundary_conditions = 'open',
 NON_LINEAR = .false.,
 METHOD = 'EXP',
 METH   = 2,
 DTIM   = 0.002,
 NTIME  = 3,
 NAVERAGE = 50,
 nlphi = .true.,
 nlapar = .false.,
 nlbpar = .false.,
 collisions = .false.,
 disp_par = 0.4,
 disp_vp  = 0.00,
 disp_x   = 0.0,
 disp_y   = 0.0,
 lverbose     = .false.,
 normalized =.true.,
 max_sec = -1,
 READ_FILE  = .true.,
 ltrapping_arakawa = .false.,
 silent = .true.,
 gamatol     = 0.5e-7,
 nl_dtim_est = .true.,
 dt_min = 0.,
 fac_dtim_est = 0.9,
 min_gr = -0.5,
 max_gr = 2000.0,
/
!---------------------------------------------------------------------------------------------------------------------
 &GRIDSIZE
 NX = 1,                        !Number of radial wave vectors - currently needs to be an odd number for fft
 N_s_grid = 120,                 !Number of grid points along the field line
 NPERIOD = 3,                   !Integer that specifies the length of the field line,
                                !The field line makes 2*nperiod - 1 poloidal turns. For nonlinear, nperiod must be 1. 
                                !Note that for nperiod = 1 and mode_box=true the kx modes are connected 
                                !For other nperiod /= 1 the solution is set to zero at the end of the field line.
 N_mu_grid   = 15,               !Total number of magnetic moment grid points 
 N_vpar_grid = 32,              !Number of grid points for parallel velocity (formerly nvpar, which still works)
 NMOD = 1,                      !Total number of binormal modes - do not interact for non-linear runs
 number_of_species = 2,          !Number of species. Note: do not count the adiabatic species 
 N_procs_sp   = 2,               !Manually specify the number of procs over species ; the total number of processors
                                !must be equal to the product of N_procs_[sp|mu|vpar|s] UNLESS all are 1 (default),
                                !in which case the code automatically decides how many procs to use in each direction
                                !(but only for the existing test cases + vp_trap case in vpar direction).
 N_procs_mu   = 1,               !As above, but for mu                                              (default = 1)
 N_procs_vpar = 1,               !As above, but for vpar (>1 only works if vp_trap = 1 right now)   (default = 1)
 N_procs_s    = 4,               !As above, but for s                                               (default = 1)
 vpmax = 3,                    !maximum normalized value of the parallel velocity grid            (default = 3.)
 mumax = 4.5,                    !maximum normalized value of the mu velocity grid                  (default = 4.5)
 /
!---------------------------------------------------------------------------------------------------------------------
 &MODE                          !Namelist read in mode.f90
 kr_type = 'kr',              !Allowed are 'chin' (poloidal shift of the ballooning transform) 
                                !         or 'kr' (radial wave vector)                              (default='chin')   
 CHIN    = 0.,                  !Poloidal shift of the ballooning transform for mode_box false only (default = 0)
 KRRHO   = 0.1,                  !Radial wave vector for mode_box false only (default = 0)
 KTHRHO  = 0.4,         !Poloidal wave vector(s) if mode_box=.false.                        (default = 0 fails)
                                !Only first nmod are used. Does nothing for mode_box=.true.  
                                !For ITG The most unstable mode has kthro ~ 0.5
 mode_box = .false.,            !Determines if there is a 2D grid of ky,kx. if true use nperiod = 1  (default = F)
                                !If nperiod = 1 and mode box = .true. the kx modes will be coupled.
 krhomax = 1.3626,                 !For mode_box, the maximum k_theta rho_i (ky) used                   (default = 0 fails)
                                !nmod>1 modes are equally spaced from 0 to to krhomax
                                !k_perp is evaluated on the low field side of the outboard midplane
                                !rho_i evaluated on the flux surface at the major radius of the magnetic axis
                                !Note that other codes may normalise the thermal velocity differently
                                !Which can result in a factor sqrt(2) greater in gkw k_theta vectors
 ikxspace = 14,                  !Determines the spacing between the different kx modes               (default = 0 fails)
                                !Use to control relative kxmax (radial resolution) and kxmin (lx)
                                !Not used if mode_box=.false. or shat=0.
                                !See mode_box_calculator.ods spreadsheet for detail
                                !This integer is called 'p' in the manual, section local limit.
 /
!---------------------------------------------------------------------------------------------------------------------
 &GEOM                          !Namelist read in geom.F90
 SHAT = 1.0,                   !Magnetic shear           (not used with geom_type chease)        (default = 1.23e4)
 Q    = 2.0,                   !Safety factor            (not used with geom_type chease)        (default = 1.23e4)
 EPS  = 0.16,                   !minor radial coordinate / major radius                           (default = 1.23e4)
 GEOM_TYPE = 'fourier',          !Switch for the metric: 's-alpha' or 'circ' or 'chease'           (default = 's-alpha')
 EQFILE='/workgpfs/rech/las/rlas001/runs/chease/hamada.059265.62132.dat',    !file containing the chease output, only for 'chease' mode
 SIGNB = -1,                     !Sign of B.grad_phi, the toroidal component of the magnetic field (default = 1)
 SIGNJ = -1,                      !Sign of j.grad_phi, the toroidal component of the plasma current (default = 1)
 EPS_TYPE = 1,                   !Radial coordinate used to specify the chosen FS (chease only)  (default=1)
                                !1=eps, 2=rho_psi
 R0_LOC = 'LFS',                ! R0 value at which species densities and gradients are defined  (default='axis')
                                ! Irrelevant if no centrifugal effects as density is constant on FS
                                ! Allowed are 'axis' (point on flux surface where R=Raxis)
                                ! and 'LFS' (low field side in plane of magnetic axis, s=0)
                                !------------------------------------------------------------------
                                  ! The parameters below are only used by the miller geometry model:                                                   
                                  !  R = Rmil + r*cos(theta + arcsin(delta)*sin(theta))
                                  !  Z = ZZmil + r*kappa*sin(theta + square*sin(2*theta))
                                  ! with r=(Rmax-Rmin)/2
                                  ! Miller geometry is normalised with Rmil (Rref=Rmil, EPS=r/Rmil)
                                  ! Bref=Bt(R=Rmil) -> F=RBt=RrefBref
                                  ! There are no default values, each numerical parameter MUST be provided
   kappa = 1.5,                    ! Elongation
   delta = 0.3,                    ! Triangularity
   square = 0.1,                   ! Squareness (zeta)
   Zmil = 0.0,                     ! Elevation : Zmil = ZZmil/Rmil
   skappa = 0.5,                   ! Radial derivative of kappa : (r * dkappa/dr) / kappa
   sdelta = 0.3,                   ! Radial derivative of delta : (r * ddelta/dr) / sqrt(1-delta^2) :
                                  ! definition from Miller et al. PoP 5, 973 (1998)
   ssquare = 0.2,                  ! Radial derivative of squareness : r * dsquare/dr
   dRmil = 0.1,                    ! Radial derivative of Rmil : dRmil/dr
   dZmil = 0.1,                    ! Radial derivative or Zmil : dZmil/dr
   N_shape = 50,                   ! Number of Fourier coefficients used to parametrise the flux surface shape (max 50)
   c = 0.19721,-0.0095783,-0.03945,0.013464,0.0004198,-0.0043227,0.0028151,3.4055e-05,-0.001166,0.00067845,7.2206e-05,-0.00033745,0.00018176,3.7329e-05,-0.00010792,5.1768e-05,1.7635e-05,-3.6256e-05,1.4983e-05,7.8182e-06,-1.2552e-05,4.2941e-06,3.3471e-06,-4.4362e-06,1.1669e-06,1.3912e-06,-1.5983e-06,2.6851e-07,5.5548e-07,-5.9478e-07,2.259e-08,2.0363e-07,-2.3872e-07,-3.8262e-08,5.6631e-08,-1.1319e-07,-5.0322e-08,-4.8346e-09,-6.9949e-08,-5.153e-08,-3.0969e-08,-5.6005e-08,-5.1414e-08,-4.2608e-08,-5.2372e-08,-5.1799e-08,-4.8293e-08,-5.2253e-08,-5.2686e-08,-5.1474e-08,
   s = 0,3.6756e-10,7.361e-10,1.1066e-09,1.48e-09,1.8573e-09,2.2394e-09,2.6274e-09,3.0221e-09,3.4246e-09,3.8357e-09,4.2565e-09,4.6877e-09,5.1305e-09,5.5855e-09,6.0538e-09,6.5363e-09,7.0337e-09,7.5469e-09,8.0767e-09,8.6239e-09,9.1893e-09,9.7737e-09,1.0378e-08,1.1002e-08,1.1647e-08,1.2314e-08,1.3002e-08,1.3713e-08,1.4448e-08,1.5205e-08,1.5986e-08,1.6792e-08,1.7621e-08,1.8475e-08,1.9353e-08,2.0255e-08,2.1182e-08,2.2133e-08,2.3107e-08,2.4105e-08,2.5126e-08,2.6169e-08,2.7234e-08,2.832e-08,2.9426e-08,3.0552e-08,3.1695e-08,3.2856e-08,3.4032e-08,
  c_prime = 1.5515,0.030763,-0.63998,0.13789,0.065878,-0.08817,0.049079,0.013136,-0.035198,0.015684,0.0074534,-0.012695,0.0048658,0.0034184,-0.0047935,0.0015414,0.0016074,-0.0018152,0.00047498,0.00075462,-0.00067054,0.00015096,0.0003625,-0.0002288,6.0634e-05,0.00018517,-5.8538e-05,4.0382e-05,0.00010619,6.6062e-06,3.8796e-05,7.1499e-05,3.1226e-05,4.0848e-05,5.6456e-05,4.0359e-05,4.2773e-05,5.0005e-05,4.365e-05,4.3991e-05,4.7261e-05,4.4783e-05,4.4653e-05,4.6094e-05,4.5145e-05,4.4981e-05,4.5596e-05,4.5243e-05,4.5126e-05,4.5382e-05,
   s_prime = 0,0.079966,0.006902,-0.021127,0.0054239,0.0025252,-0.0041819,0.0020185,0.00086689,-0.0016066,0.0005966,0.00042161,-0.00058077,0.0001786,0.00019005,-0.00021702,5.2758e-05,8.7521e-05,-7.9724e-05,1.5779e-05,4.1509e-05,-2.6981e-05,6.4547e-06,2.1528e-05,-6.2658e-06,5.2637e-06,1.334e-05,2.2904e-06,6.264e-06,1.0469e-05,6.2846e-06,7.763e-06,1.0007e-05,8.6312e-06,9.3537e-06,1.0666e-05,1.0443e-05,1.0983e-05,1.1879e-05,1.214e-05,1.2671e-05,1.3401e-05,1.3874e-05,1.4442e-05,1.5118e-05,1.5694e-05,1.6306e-05,1.6976e-05,1.7608e-05,1.8259e-05,
   gradp_type = 'beta_prime'       ! 'alpha', 'alpha_mhd', 'pprime', or 'beta_prime', 'beta_prime_input'
                                  ! , 'rota_miller' (default = 'alpha_mhd')
   gradp = +0.1646,                    ! Pressure gradient in form determinted by gradp_type
                                  ! alpha: interpret gradp as alpha definition: eq. 42 of Miller et al. PoP 5, 973 (1998)
                                  ! alpha_mhd: interpret gradp as definition:  eq. 141 of Candy PPCF 51, 105009 (2009)
                                  ! alpha_mhd and alpha are the same for circular surfaces with skappa=sdelta=square=0..
                                  ! pprime: interpret gradp as pressure gradient with respect to poloidal flux in normalised units 
                                  ! (gradp = 2 mu0 * dpdpf * Rref^2 / Bref)
                                  ! beta_prime_input: interpret gradp as beta_prime (independent of the SPCGENERAL value)
                                  ! beta_prime: use the value of beta_prime used in the curvature operator (set by SPCGENERAL)
                                  ! (either beta_prime_type='ref' or beta_prime_type='sp') is used (gradp is ignored).
                                  ! rota_miller : add the effect of rotation in the magnetic equilibrium using
                                  ! eq.24 of Miller et al. PoP 5, 973 (1998). beta_ref from SPCGENERAL, mass, temp, dens,
                                  ! rlt, rln, uprim from SPECIES and vcor from ROTATION are used.
                                  ! NOTE alpha is NOT used by the 's-alpha' model, which has alpha=0 !                                
  /
!---------------------------------------------------------------------------------------------------------------------
 &SPCGENERAL                    !This namelist read in components.f90
 beta_type='ref',
 betaprime_type='ref',
 beta_ref = 0.0,                  !Plasma beta (not used if nlapar = .false.)                        (default = 0.00)
 betaprime_ref = -0.3,
 adiabatic_electrons = .false.,   !Adiabatic electrons (alternative is kinetic electrons)            (default = .false.)
                                !Note that kinetic electrons require a smaller timestep for stability
 amp_init = 1e-3,                !Initial amplitude of distribution function                        (default = 1e-3)
 finit = "hybrid",                !Perturbed distribution function is initialised                    (default = 'cosine')
                                !Allowed are "noise","cosine" (default), "sine", "gauss" or "zonal"
                                !'line' (of gaussians), 'island' 'sgauss' (velocity space)
                                !'kxzero' and 'kyzero' for an individual mode only, for testing
                                !Magnetic islands are experimental and under development.
 /
!---------------------------------------------------------------------------------------------------------------------
 !The species must satify quasi-neutrality.
 !This requires you to set ratios of densities and charge appropriately
 !Note that the if number_of_species above is less than the number in the list below, later ones will not be read in
 !If number_of_species is greater than the number in the in the list below, the program will crash.
 !There are no default values for most of the parameters.
 !If there is an adiabatic species, it is the negatively charged species. 

 &SPECIES                       !This namelist read in components.f90
 MASS  = 1.0,                   !Species mass in terms of reference value
 Z     = 1.0,                   !Species charge. If negative, assumed to be the electrons.
 TEMP  = 1.0,                    !Temperature of species scaled by reference temperature
 DENS  = 1.0,                    !Density of species scaled by reference density
 rlt   = 6.0,                     !Temperature gradient R/LT
 rln   = 6.0,                   !Density gradient R/Ln
 uprim = 1.0,                   !Gradient of the toroidal velocity Rref^2 grad Omega / v_thref
 / 
 &SPECIES 
 MASS  = 2.7237e-4,               !Yes, these are the electrons (with example ions as deuterium)
 Z     = -1.0,                  !Only one species may have negative charge. No muons or antiprotons please.
 TEMP  = 1.0, 
 dens  = 1.0,
 rlt   = 6.0,
 rln   = 6.0, 
 uprim = 1.0,
 /
!---------------------------------------------------------------------------------------------------------------------
 &ROTATION                      !Optional Namelist read in rotation.F90
 VCOR = 0.3,            !Rotation of the plasma vcor =  Rref Omega / vthref = Omega_N        (default = 0.0)
                                !Always in direction of toroidal magnetic field if positive.
 shear_rate = 0.0,              !Normalised shearing rate for the E x B perpendicular shear           (default = 0.0)
                                !Positive values correspond to postive uprim for toroidal rotation
 shear_profile   = 'none',
 coriolis = .true.,              !Keep the coriolis drift                                               (default = T)
 cf_drift = .true.,             !Keep the centrifugal drift                                            (default = F)
 cf_trap = .true.,              !Keep the centrifugal trapping and potential                           (default = F)
 / 
!---------------------------------------------------------------------------------------------------------------------
 &COLLISIONS                    !Optional namelist only used if collisions = .true.  Read in collisionop.f90
 rref = 2.960000e+00,                       !reference major radius used in collision operator                     (default=1.0) 
 tref = 3.980199e+00,                       !reference temperature in units of kev used for the collision operator (default=1.0)
 nref = 5.749795e+00,                       !reference density in units 10^19 m^-3 used for the collision operator (default=1.0)
 pitch_angle = .false.,           !Switches for the collsion terms, this one is pitch angle scattering   (default = T)
 en_scatter = .false.,            !Energy scattering term                                                (default = T)
 friction_coll = .false.,         !Collisional friction term                                             (default = T)
 mom_conservation = .true.,     !Use the correction to conserve momentum                               (default = T)
 ene_conservation = .true.,
 cons_type = 'Lin',  
 mass_conserve = .false.,        !Forces zero flux boundary on velocity space so no out flow of mass    (default = T)
 freq_override=.false.,          !Manually specify ii collision frequency to override ref values above. (default = F)
 coll_freq=6.515E-5,             !Ion-ion collision frequency used if freq_override=.true.              (default=0.0)
 /
!---------------------------------------------------------------------------------------------------------------------
 &DIAGNOSTIC  !> Optional namelist read in diagnostics.F90 to switch individual diagnostics on / off. 
              !< This is for the diagnostic switches; some switches from elsewhere will be moved here
 NFLUSH_TS = 10         ! The number of large time steps between flushing fluxes,time etc. to file  (default = 10)
 LPFLUX=T              ! Enable output of pflux in fluxes - time diagnostic                        (default = T)
 LEFLUX=T              ! Enable output of eflux in fluxes - time diagnostic                        (default = T)
 LVFLUX=T              ! Enable output of vflux in fluxes - time diagnostic                        (default = T)
 LFLUXES_SPECTRA=T     ! Enable output of fluxes spectra - time diagnostic                         (default = T)
 LFLUXES_EM_SPECTRA=T,  ! Enable output of EM (apar) fluxes spectra - time diagnostic               (default = F)
 LFLUXES_DETAIL=F      ! writes the fluxes as a function of s, mu and vpar                         (default = F)
 LPARALLEL_OUTPUT =T,   ! writes the output of the moments along the magnetic field                 (default = T)
 LROTATE_PARALLEL=T,    ! normalizes the parallel output such that Re[phi(s=0)] = 1.                (default = T)
 LPARALLEL_PHI=F       ! Enable time output of electrostartic potential along field line           (default = T)
 LPARALLEL_APAR=F,      ! Enable time output of A_// magnetic  potential along field line           (default = F)
 LMPI_BROKEN_IO=T      ! If MPI_IO fully supports derived datatypes, use F for faster file write   (default = T)
 lphi_diagnostics = .true.   !Meta switch for 2-D diaganostics for nonlinear or mode_box runs      (default = T)
 xy_estep = F          ! True for XY output at every large time step, False for only at last step   (default = T)
 lwrite_output1 = T    ! Meta switch for all per timestep output (fluxes, time traces, 2D)       (default = T)
 kykxs_phi = F         ! 3D electrostatic potential on the ky,kx,s grid (spectral runs)            (default = F)
 kykxs_apar = F        ! 3D parallel vector potential on the ky,kx,s grid (spectral runs)          (default = F)
 kykxs_bpar = F        ! 3D parallel magnetic field on the ky,kx,s grid (spectral runs)            (default = F)
 kykxs_moments = F     ! 3D density, v_//, T_//, T_perp on the ky,kx,s grid (spectral runs)        (default = F)
 kykxs_j0_moments = F  ! same as above, but with a J0 factor in the velocity space integral        (default = F)
 kykxs_j1_moments = F  ! same as above, but with a J0 factor in the velocity space integral        (default = F)
 LCALC_FLUXES    = .true.     !Calculate fluxes                                                    (default = T)
 LCALC_FREQ      = .true.    !Calculate the mode frequency (only for linear runs)                 (default = T)
 LFINAL_OUTPUT   = .true.     !write final output                                                  (default = T)
 screen_output = .false.       !Write per timestep data to screen  (fluxes, timestep, growth rates) (default = T) 
 LAMPLITUDES     = F,         !Amplitudes diagnostic per mode (kx, ky 2D)                          (default = F)
 LGROWTH_RATES   = F,          !Growth rates diagnostic per toriodial mode                          (default = F)
 /
!---------------------------------------------------------------------------------------------------------------------
 &LINEAR_TERMS_SWITCHES         !Optional namelist read in linear_terms.F90 to switch on /off individual linear terms. 
 lampere = .true.               !Allows time evolution of vector potential                      (default = .true.)
 lpoisson = .true.              !Allows time evolution of electro-static potential              (default = .true.)
 lvpar_grad_df = .true.         !Parallel streaming                                             (default = .true.)
 lvdgradf = .true.              !Effect of drifts on g                                          (default = .true.)
 ltrapdf = .true.               !Particle trapping term                                         (default = .true.)
 lve_grad_fm = .true.           !Source terms                                                   (default = .true.)
 lvd_grad_phi_fm = .true.       !Source terms                                                   (default = .true.)
 lvpgrphi = .true.              !Particle acceleration via E fields                             (default = .true.)
 lg2f_correction = .true.       !Adds electromagnetic correction to f                           (default = .true.)
 lpoisson_zf = .true.           !Zonal flow term in poissons equation                           (default = .true.)
 lneoclassical = .true.         !Neoclassical effects (also require neoclassics in control)     (default = .true.)
 /
