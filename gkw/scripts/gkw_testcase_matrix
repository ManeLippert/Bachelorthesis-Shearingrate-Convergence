#!/bin/bash

# A script to output a table of:   a list of parameters vs. testcase input files

options_list="flux_tube non_linear spectral_radius nmod nx mode_box nlapar nlbpar collisions neoclassics tearingmode adiabatic_electrons meth"

default_testset="$GKW_HOME/tests/standard"

function get-value-from-namelist-file(){
    # example call: eval `from-inputdat("n_mu_grid")`
    namelistfile="$2"
    line=$(grep -w --max-count=1 -i "^ *$1 *=" "$namelistfile")
    #pattern substitution: remove the longest part of pattern that matches the back end:
    # remove a fortran comment
    statement=${line%%\!*}
    # remove a trailing comma
    statement=${statement%%,*}
    # replace all spaces with nothing
    statement="${statement//' '/}"
    # remove everything before the equal sign
    statement="${statement##*=}"
    statement_lowercase=$(echo $statement | tr 'A-Z' 'a-z')
    echo $statement_lowercase
}

function display_matrix_header(){
printf "%${name_column_width}s|"
list=$@
w_list=$width_list
for o in $list
do
    width=$(echo -n $o | wc --chars)
    printf "%${width}s|" $o
done
printf "\n"
}

function display_matrix(){
    testset=$1
    shift
    list=$@
    
    for folder in $foldernames
    do
        inputfile=$folder/input.dat
        if [ -e $inputfile ]
        then
	    printf "%${name_column_width}s|" $(basename $(dirname $inputfile))
	    for o in $list
	    do
	        width=$(echo -n $o | wc --chars)

	        defaultval=""
	        # sample_file=$GKW_HOME/doc/input.dat.sample
	        # defaultval=$(get-value-from-namelist-file "$o" $sample_file)
	        # defaultval="${defaultval/.true./T}"
	        # defaultval="${defaultval/.false./F}"
	        # defaultval="${defaultval//\'/}"
	        # defaultval="${defaultval//\"/}"
	        
	        val=$(get-value-from-namelist-file "$o" $inputfile)
	        val="${val/.true./T}"
	        val="${val/.false./F}"
	        val="${val//\'/}"
	        val="${val//\"/}"
	        
	        printf "%${width}s|" ${val:-$defaultval}
	    done
	    printf "\n"
        fi
    done
}

function get_foldernames() {
    for f in $(find $1 -maxdepth $2 -name 'input.dat')
    do
        folder=${f%%input.dat}
        if [ ! -d $folder/../reference ]
        then
            echo $folder
        fi
    done
}

function get_max_foldername_length() {
    for foldername in $@
    do
        if [ -d $foldername ]
        then
            basename $foldername | wc --chars
        fi
    done | sort --reverse --numeric-sort | head -n1
}

cat <<EOF
 Usage: $0 [testset [depth [additional_parameter [additional_parameter2 [...]]]]] 

 The foldername <testset> defaults to "$default_testset".

EOF

testset_arg=${1:-$default_testset}
# shift positional arguments by one
shift
if [[ "$1" =~ ^[0-9]+$ ]]
then
    depth=$1
    shift
else
    depth=2
fi
echo "Search depth: $depth"
more_params_arg=$@

foldernames=$(get_foldernames $testset_arg $depth)

name_column_width=$(get_max_foldername_length $foldernames)

display_matrix_header $more_params_arg $options_list
# sort, but look only at 2nd and higher columns:
display_matrix $testset_arg $more_params_arg $options_list | sort  --version-sort --key=2
