#!/bin/sh
#  -*-Perl-*-  (for Emacs)    vim:set filetype=perl:  (for vim)
#======================================================================#
# Run the right perl version:
if [ -x /usr/local/bin/perl ]; then
  perl=/usr/local/bin/perl
elif [ -x /usr/bin/perl ]; then
  perl=/usr/bin/perl
else
  perl=`which perl| sed 's/.*aliased to *//'`
fi
#
exec $perl -x -S $0 "$@";     # -x: start from the following line
#======================================================================#
#! /Good_Path/perl -w
# line 17
#
#  Compare
#  `input.dat' and `input.dat.sample'.
#  error if input.dat contains a variable not in the sample file or in
#  the wrong namelist
#

use strict;

my $nml_start  = '^\s*\&\s*\w\s*';
my $nml_end = '^\s*\/\s*';
my $input_file = 'input.dat';
my $input_sample_file = 'input.dat.sample';
my %input_list;
my %input_sample;

# put the input file and sample file namelists into a hash of arrays
# (later a hash of hashes)
%input_list = find_lines_to_move($input_file);
%input_sample = find_lines_to_move($input_sample_file);

# compare the arrays for each key in input
foreach my $nlist ( keys %input_list ) {
    print "$nlist: ";
    print "bad! $nlist \n" unless (check_name($nlist));
    foreach my $i ( 0 .. $#{ $input_list{$nlist} } ) {
        if (check_value($nlist,$input_list{$nlist}[$i])) {
        print " $input_list{$nlist}[$i]";
        } else {
           print " $input_list{$nlist}[$i] is present but not valid!\n";
           die "done\n";
        }
    }
    print "\n";
}

#----------------------------------------------------------------------------


# check if the namelist exists in sample (not necessary)
  sub check_name {

    my $name = shift;
    foreach my $nmlname (keys %input_sample) {
      return 1 if ($nmlname =~ /$name/);
    }
    return 0;
  }
#----------------------------------------------------------------------------

# check if a value is allowed
  sub check_value {
    my $liste = shift;
    my $value = shift;
    print "list is this $liste; value is $value\n";
    foreach my $nmlname (keys %input_sample) {
      if ($nmlname =~ /$liste/) {
        foreach my $j ( 0 .. $#{ $input_sample{$nmlname} } ) {
        print "TRY $input_sample{$nmlname}[$j] === $value\n";
        return 1 if ($input_sample{$nmlname}[$j] =~ /$value/);
        }
      }
    }
    return 0;
  }

#----------------------------------------------------------------------------
# get all namelists from a file
#
sub find_lines_to_move{
    my $file = shift;
    my %lists;
    my $get_var_from_line = 0;
    my $use_this_line = 1;
    my @vars;
    my $listname;

    open(INPUT,"<$file") || die "can not open file $file\n";

    # read through the whole file a line at a time
    while( my $line = <INPUT> ) {

        chop($line);
        # check if we are at a nml
        if ($line =~ m/$nml_start/i ) {
            $get_var_from_line = 1;
            $use_this_line = 0;
        }
        if ($line =~ m/$nml_end/i) {
            # need to modify listname for secondary species?
            $lists{$listname} = [ @vars ];
            @vars = ();
            $get_var_from_line = 0;
        }

        # make a list of the items to move from control
        if ($get_var_from_line) {
            if ($use_this_line) {
                $line =~ s/[[:space:]]*\=.*$//;
                $line =~ tr/a-z/A-Z/;
                chomp($line);
                print "$line\n" unless ($line =~ m/\!/i or $line eq "");
                push @vars, $line unless ($line =~ m/\!/i or $line eq "");
            } else {
                $line =~ s/\&([[:alpha:]]+).*$/${1}/;
                $line =~ tr/a-z/A-Z/;
                print "LISTNAME: $line\n";
                chomp($line);
                $listname = $line;
                $use_this_line = 1;
            }
        }
    }
    close(INPUT);
    return %lists;
}
