To add these scripts to your matlab path:
mkdir ~/matlab
echo addpath ${GKW_HOME}/matlab -end >> ~/matlab/startup.m

***By Yann: 

Brief overview:

gkwpath.m is used to get the paths where GKW data are stored. It includes a switch on the user, so everybody can add his own paths. A project name can be specified when calling gkwpath to get the paths associated with different projects.  You will need to set this up for your gkw path for many of the other scripts to work.

create_gkwscan.m is an interactive routine to create the input files for GKW scans. It also generates a scan summary. All variables of the GKW input file can be scanned. It is also is possible to couple several variables in a scan. For instance you can scan "Z" and change "mass" accordingly to keep a constant Z/mass ratio without covering the full Z*mass space.  See help for details.

list_gkwscan.m can be used to print a brief summary of the scans associated to a project (useful when the filenames are too cryptic to remember what it means)

read_gkwscan.m loads the data associated to a scan/project. Only the last time slice of each file is loaded.
Because the data is stored in multi-dimensional arrays, you might have to use the "squeeze" command to do plots in matlab.

modify_gkwinput.m: An input file can be modified using modify_gkwinput.m: you just have to specify the variable names and their values. Useful in a loop to change a list of files.

check_gkwoutput.m can be used to check the convergence of a run: it plots the temporal evolution for the growth rate, fluxes ratio and shows the potential and the distribution function for the last time step.

read_gkwinput.m   reads an input file to matlab structure

Do not hesitate to contact me if you want a short tutorial for using these routines.


***By Francis

*These interface with Yann's routines - gkwpath needs to bet set up correctly for your projects folder)
*Most of the scripts assume the folder structure of gkwnlin batch run script

write_gkwinput.m   writes an input file from a matlab structure (see examples in input_refs.mat). Self documenting - 'help write_gkwinput' for usage.

mode_box_calculator.m  Calculator to help setting up the inputs for nonlinear runs

growth_rate_spec.m defines a matlab function that plots a linear mode growth rate spectrum extrated from a batch of linear runs with nmod=1.  Self documenting: 'help growth_rate_spec' for usage.

growth_rates.m defines a function which takes (average) mode growth rate data (only output for linear runs) from the time output directory of a project (using the directory structure of the script gkwlin) and plots against another (presumably scanned) variable in the input files.  Self documenting: 'help growth_rates' for usage.  For most linear runs time averaging of the growth rate should not be necessary.

fluxes.m defines a matlab function that extracts the time AVERAGE fluxes information from the fluxes folder for multiple runs in a project, averages the last n_av data points, and plots against a scanned variable.  Self documenting: 'help fluxes' for usage. Necessary because for non linear runs the fluxes fluctuate.

fluxes_ratio.m defines a matlab function that extracts the time AVERAGE fluxes information from the fluxes folder for multiple runs in a project, and plots the ratio of two fluxes against a scanned variable.  Self documenting: 'help fluxes_ratio' for usage. 

spectra.m defines a matlab function that extracts the time AVERAGE spectrum information for any of the spectra, averages the last n_av data points, and plots. Self documenting: 'help spectra' for usage. Necessary because for non linear runs the fluxes fluctuate.  Self documenting: 'help spectra' for usage.

countour_spec for plotting full time evolution of spectral quantities as a contour plot.  Self documenting.

paralleldat.m extracts infomration from the parallel.dat file for a single mode and coloumn and plots. Self documenting.

parallel_phi.m TIME AVERAGES and plots the output of parallel_phi.dat against s, self documenting: 'help parallel_phi' for usage.

parallel_phi_movie.m  plots the time output of parallel_phi.dat as a movie, self documenting: 'help parallel_phi' for usage.

time_traces.m  For quickly plotting multiple time trace data (e.g fluxes) from multiple runs in a project onto same graph.

read_phi3d.m function to reads the GKW 3d potential spectral output SPc3dXXXXX files and time
average, returning as a 3D array. Assumes directory structure of gkwnlin.  Self documenting: 'help read_phi3d' for usage. 

velplot.m - function that plots the velopicty space diagnostic - only useful for linear single mode runs.  Self documenting.

Do not hesitate to contact me if you want a short tutorial for using these routines.


***By Arthur

-----
read_gkwflux.m    : Reads the fluxes
plot_flux.m       : plots the fluxes
average_error.m   : calculates the average (WITH erorr bars)
trans_coef.m      : calculates the transport coefficients
read_gkwrun.m     : read all the currently implemented data

The central idea is to add all output to the same structure that
is used to store the values of the input file. This structure
can then be used in various routines with the advantage that
all information is available. For instance the transport
coefficients can be calculated since the gradients as well as
the fluxes are stored in the same structure.

------
gkw_gui.m

Simple GUI to look at the output of a linear run
Only

1. Growth rate / frequency
2. Fluxes
3. Linear mode structure (one mode only)

Works with both the directory structure (dir input,
fluxes, parallel etc.) as well as a single directory
with the files time.dat / fluxes.dat etc.

One can select
1. Species 1/2/3/or all
2. Fluxes: particle / heat / momentum
3. The various quantities for which the parallel
   mode structure can be ploted.

Mostly useful for the parallel mode structure since
one can very easily toggle through the various profiles.

----
mkmovie.m takes the data in the phi00000x files (for mode_box=.true.) and makes a 2D movie of the evolution of the perpendicular potential on the outboard side. First set nframes=30 etc/


***By Will

MakeFluxTubeVideo.m takes all the large amount of data in the PhiTDxxxx_xxxx files (if ouput3d = .true. and modebox=.true.) and combines it and plots the data output in nice slices and creates a video.  It also outputs the data in incrementally numbered hdf files so then you can delete all the PhiTD files and save space.  To operate the Matlab routine you need to give it the number of large time steps and the number of cells in the s direction and the number of small time steps per big time step (Named interval).






